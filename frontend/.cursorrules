# MindToon iOS App - Cursor Rules

## Project Overview
MindToon is a comic generation iOS app built with SwiftUI that integrates with a FastAPI backend. The app features a multi-world system (Dream World, Mind World, Imagination World), comic collections, detailed scenarios, and cloud storage integration.

## Backend Integration
- **Base URL**: `http://localhost:8080` (development) / Production URL
- **Backend Port**: 8000 (backend runs on 8000, but iOS client uses 8080 - update as needed)
- **Authentication**: JWT Bearer tokens
- **Storage**: Supabase cloud storage for comic images
- **Worlds**: Dream World, Mind World, Imagination World organization

## File Structure & Organization

### Current Structure
```
Trial2/
â”œâ”€â”€ App/                     # App configuration and constants
â”œâ”€â”€ Core/                    # Core navigation and shared components
â”œâ”€â”€ Features/
â”‚   â”œâ”€â”€ ViewModels/         # Business logic and state management
â”‚   â””â”€â”€ Views/              # SwiftUI views and UI components
â”œâ”€â”€ Models/                 # Data models and API models
â”œâ”€â”€ Services/               # API client and external service integrations
â”œâ”€â”€ Assets.xcassets/        # Images, colors, and other assets
â””â”€â”€ Preview Content/        # SwiftUI preview assets
```

### Required Updates for Enhanced Backend
```
Models/
â”œâ”€â”€ APIModels.swift         # âœ… Existing - needs updates for new backend features
â”œâ”€â”€ WorldModels.swift       # ðŸ†• NEW - World system models
â”œâ”€â”€ CollectionModels.swift  # ðŸ†• NEW - Collection system models
â”œâ”€â”€ ScenarioModels.swift    # ðŸ†• NEW - Detailed scenario models
â””â”€â”€ ErrorModels.swift       # ðŸ†• NEW - Comprehensive error handling

Services/
â”œâ”€â”€ APIClient.swift         # âœ… Existing - needs major updates
â”œâ”€â”€ AuthManager.swift       # âœ… Existing - needs account deletion features
â”œâ”€â”€ WorldManager.swift      # ðŸ†• NEW - World system management
â”œâ”€â”€ StorageManager.swift    # ðŸ†• NEW - Supabase storage integration
â””â”€â”€ TestingService.swift    # ðŸ†• NEW - No-auth testing endpoints

Features/ViewModels/
â”œâ”€â”€ ComicGeneratorViewModel.swift  # âœ… Existing - needs world integration
â”œâ”€â”€ WorldViewModel.swift           # ðŸ†• NEW - World management
â”œâ”€â”€ CollectionViewModel.swift      # ðŸ†• NEW - Collection management
â”œâ”€â”€ ScenarioViewModel.swift        # ðŸ†• NEW - Scenario management
â””â”€â”€ ProfileViewModel.swift         # âœ… Existing - needs account deletion

Features/Views/
â”œâ”€â”€ WorldsView.swift               # ðŸ†• NEW - Multi-world interface
â”œâ”€â”€ CollectionsView.swift          # ðŸ†• NEW - Collection management
â”œâ”€â”€ DetailedScenarioView.swift     # ðŸ†• NEW - Rich scenario reading
â””â”€â”€ AccountDeletionView.swift      # ðŸ†• NEW - Account management
```

## API Integration Patterns

### 1. API Client Structure
```swift
class APIClient {
    static let shared = APIClient()
    private let baseURL = "http://localhost:8080" // Update port to match backend
    
    // MARK: - Authentication (âœ… Existing)
    func login(username: String, password: String) async throws -> TokenResponse
    func register(user: RegisterRequest) async throws -> UserResponse
    func getUserProfile(token: String) async throws -> UserResponse
    func deleteAccount(confirmation: AccountDeletionRequest, token: String) async throws -> DeletionSummary
    
    // MARK: - Enhanced Comics (ðŸ”„ Update existing methods)
    func generateComicWithData(request: ComicSaveRequest, token: String) async throws -> ComicGenerationResponse
    func getMyComics(token: String, limit: Int, offset: Int, genre: String?, artStyle: String?, isFavorite: Bool?) async throws -> [ComicListResponse]
    func getComic(id: Int, token: String) async throws -> ComicResponse
    func updateComic(id: Int, updates: ComicUpdateRequest, token: String) async throws -> ComicResponse
    func deleteComic(id: Int, token: String) async throws -> SuccessResponse
    
    // MARK: - World System (ðŸ†• NEW)
    func getWorldComics(request: WorldComicsRequest, token: String) async throws -> [ComicGenerationResponse]
    func getWorldStats(worldType: WorldType, token: String) async throws -> WorldStatsResponse
    
    // MARK: - Collections (ðŸ†• NEW)
    func createCollection(request: ComicCollectionRequest, token: String) async throws -> ComicCollectionResponse
    func getWorldCollections(worldType: WorldType, token: String) async throws -> [ComicCollectionResponse]
    func addComicToCollection(collectionId: Int, comicId: Int, token: String) async throws -> SuccessResponse
    
    // MARK: - Scenarios (ðŸ†• NEW)
    func saveScenario(request: ScenarioSaveRequest, token: String) async throws -> ScenarioSaveResponse
    func getScenarioByComic(comicId: Int, token: String) async throws -> DetailedScenario
    func getUserScenarios(limit: Int, offset: Int, token: String) async throws -> [DetailedScenario]
    
    // MARK: - Testing (ðŸ†• NEW - No Auth Required)
    func testGenerateComic(request: ComicRequest) async throws -> Data
    func testHealth() async throws -> HealthResponse
    
    // MARK: - Utility (ðŸ†• NEW)
    func getAvailableGenres() async throws -> [String]
    func getAvailableArtStyles() async throws -> [String]
}
```

### 2. Error Handling Pattern
```swift
enum APIError: Error, LocalizedError {
    case invalidURL
    case invalidResponse
    case unauthorized
    case serverError(Int)
    case serverErrorMessage(String)
    case decodingError(Error)
    case networkError(Error)
    case supabaseError(String)
    case worldNotFound
    case collectionError(String)
    
    var errorDescription: String? {
        switch self {
        case .unauthorized:
            return "Please log in to continue"
        case .serverError(let code):
            return "Server error: \(code)"
        case .serverErrorMessage(let message):
            return message
        case .supabaseError(let message):
            return "Storage error: \(message)"
        case .worldNotFound:
            return "World not found"
        case .collectionError(let message):
            return "Collection error: \(message)"
        default:
            return "An unexpected error occurred"
        }
    }
}
```

## Data Models Requirements

### 1. World System Models
```swift
enum WorldType: String, CaseIterable, Codable {
    case dreamWorld = "dream_world"
    case mindWorld = "mind_world"
    case imaginationWorld = "imagination_world"
    
    var displayName: String {
        switch self {
        case .dreamWorld: return "Dream World"
        case .mindWorld: return "Mind World"
        case .imaginationWorld: return "Imagination World"
        }
    }
    
    var description: String {
        switch self {
        case .dreamWorld: return "Explore the depths of your subconscious"
        case .mindWorld: return "Journey through psychological landscapes"
        case .imaginationWorld: return "Create without limits"
        }
    }
    
    var icon: String {
        switch self {
        case .dreamWorld: return "moon.stars.fill"
        case .mindWorld: return "brain.head.profile"
        case .imaginationWorld: return "wand.and.stars"
        }
    }
}
```

### 2. Enhanced Comic Models
```swift
// Update existing ComicRequest to match backend
struct ComicRequest: Codable {
    let concept: String  // Changed from 'message' to 'concept'
    let genre: String?
    let artStyle: String?
    let includeDetailedScenario: Bool
    
    enum CodingKeys: String, CodingKey {
        case concept, genre
        case artStyle = "art_style"
        case includeDetailedScenario = "include_detailed_scenario"
    }
}

// New models for enhanced features
struct ComicSaveRequest: Codable {
    let title: String
    let concept: String
    let genre: String
    let artStyle: String
    let worldType: WorldType
    let includeDetailedScenario: Bool
    
    enum CodingKeys: String, CodingKey {
        case title, concept, genre
        case artStyle = "art_style"
        case worldType = "world_type"
        case includeDetailedScenario = "include_detailed_scenario"
    }
}
```

## ViewModel Patterns

### 1. Enhanced ComicGeneratorViewModel
```swift
@MainActor
class ComicGeneratorViewModel: ObservableObject {
    @Published var comicTitle: String = ""
    @Published var scriptText: String = ""
    @Published var selectedGenre: String = "adventure"
    @Published var selectedArtStyle: String = "comic book"
    @Published var selectedWorld: WorldType = .imaginationWorld
    @Published var includeDetailedScenario: Bool = false
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var generatedComic: ComicGenerationResponse?
    
    // New properties for enhanced features
    @Published var availableGenres: [String] = []
    @Published var availableArtStyles: [String] = []
    
    func generateComic() async {
        // Implement with world-aware generation
        let request = ComicSaveRequest(
            title: comicTitle,
            concept: scriptText,
            genre: selectedGenre,
            artStyle: selectedArtStyle,
            worldType: selectedWorld,
            includeDetailedScenario: includeDetailedScenario
        )
        
        do {
            let token = await AuthManager.shared.getStoredToken()
            guard let token = token else {
                throw APIError.unauthorized
            }
            
            let comic = try await APIClient.shared.generateComicWithData(request: request, token: token)
            generatedComic = comic
            
            // Navigate or update UI
        } catch {
            errorMessage = error.localizedDescription
        }
    }
}
```

### 2. New WorldViewModel
```swift
@MainActor
class WorldViewModel: ObservableObject {
    @Published var worlds: [WorldType: [ComicGenerationResponse]] = [:]
    @Published var worldStats: [WorldType: WorldStatsResponse] = [:]
    @Published var selectedWorld: WorldType = .imaginationWorld
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    
    func loadWorldComics(for worldType: WorldType, page: Int = 1, favoritesOnly: Bool = false) async {
        // Implementation for loading world-specific comics
    }
    
    func loadWorldStats(for worldType: WorldType) async {
        // Implementation for loading world statistics
    }
    
    func switchWorld(to worldType: WorldType) {
        selectedWorld = worldType
        Task {
            await loadWorldComics(for: worldType)
            await loadWorldStats(for: worldType)
        }
    }
}
```

## SwiftUI View Patterns

### 1. World Selection Interface
```swift
struct WorldSelectionView: View {
    @StateObject private var worldViewModel = WorldViewModel()
    @Binding var selectedWorld: WorldType
    
    var body: some View {
        LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2)) {
            ForEach(WorldType.allCases, id: \.self) { world in
                WorldCard(
                    world: world,
                    isSelected: selectedWorld == world,
                    stats: worldViewModel.worldStats[world]
                ) {
                    selectedWorld = world
                    worldViewModel.switchWorld(to: world)
                }
            }
        }
    }
}
```

### 2. Enhanced Comic Generation View
```swift
struct ComicGeneratorView: View {
    @StateObject private var viewModel = ComicGeneratorViewModel()
    @State private var showWorldSelection = false
    @State private var showAdvancedOptions = false
    
    var body: some View {
        VStack {
            // World Selection
            WorldSelectionButton(selectedWorld: $viewModel.selectedWorld) {
                showWorldSelection = true
            }
            
            // Comic Input Fields
            ComicInputFields(viewModel: viewModel)
            
            // Advanced Options
            if showAdvancedOptions {
                AdvancedOptionsView(viewModel: viewModel)
            }
            
            // Generate Button
            GenerateComicButton(viewModel: viewModel)
        }
        .sheet(isPresented: $showWorldSelection) {
            WorldSelectionView(selectedWorld: $viewModel.selectedWorld)
        }
    }
}
```

## Authentication Patterns

### 1. Enhanced AuthManager
```swift
class AuthManager: ObservableObject {
    @Published var isAuthenticated = false
    @Published var currentUser: UserResponse?
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    // Existing methods
    func login(username: String, password: String) async throws
    func register(username: String, email: String, fullName: String, password: String) async throws
    func logout()
    
    // New method for account deletion
    func deleteAccount(usernameConfirmation: String) async throws -> DeletionSummary {
        guard let currentUser = currentUser else {
            throw APIError.unauthorized
        }
        
        let confirmation = AccountDeletionRequest(
            confirmDeletion: true,
            usernameConfirmation: usernameConfirmation,
            understandingAcknowledgment: "I understand this action is permanent and irreversible"
        )
        
        let token = await getStoredToken()
        guard let token = token else {
            throw APIError.unauthorized
        }
        
        let summary = try await APIClient.shared.deleteAccount(confirmation: confirmation, token: token)
        
        // Clear local data
        logout()
        
        return summary
    }
}
```

## Testing Patterns

### 1. Testing Service (No Auth Required)
```swift
class TestingService {
    static let shared = TestingService()
    private let apiClient = APIClient.shared
    
    // Test comic generation without authentication
    func testComicGeneration(concept: String) async throws -> Data {
        let request = ComicRequest(
            concept: concept,
            genre: "adventure",
            artStyle: "cartoon",
            includeDetailedScenario: false
        )
        
        return try await apiClient.testGenerateComic(request: request)
    }
    
    // Test backend health
    func testBackendHealth() async throws -> HealthResponse {
        return try await apiClient.testHealth()
    }
}
```

### 2. Preview Data
```swift
#if DEBUG
extension ComicGenerationResponse {
    static let preview = ComicGenerationResponse(
        title: "Sample Comic",
        concept: "A hero's journey",
        genre: "adventure",
        artStyle: "comic book",
        worldType: .imaginationWorld,
        imageBase64: "sample_base64_data",
        panelsData: [:],
        createdAt: Date().ISO8601Format()
    )
}

extension WorldStatsResponse {
    static let preview = WorldStatsResponse(
        worldType: .imaginationWorld,
        totalComics: 15,
        favoriteComics: 5,
        publicComics: 3
    )
}
#endif
```

## Code Style & Conventions

### 1. Naming Conventions
- **ViewModels**: `[Feature]ViewModel` (e.g., `ComicGeneratorViewModel`, `WorldViewModel`)
- **Views**: `[Feature]View` (e.g., `ComicGeneratorView`, `WorldSelectionView`)
- **Models**: Descriptive names matching backend models
- **Services**: `[Purpose]Manager` or `[Purpose]Service`

### 2. File Organization
- Group related files in folders
- Use `// MARK: -` for section organization
- Keep view files under 200 lines
- Extract complex views into separate components

### 3. SwiftUI Best Practices
- Use `@StateObject` for creating ViewModels
- Use `@ObservedObject` for passing ViewModels
- Prefer `@Binding` for two-way data flow
- Use `Task {}` for async operations in views
- Implement proper loading and error states

### 4. Error Handling
- Always handle API errors gracefully
- Show user-friendly error messages
- Implement retry mechanisms where appropriate
- Log errors for debugging (use `print()` in development)

## Backend Integration Checklist

### âœ… Completed Features
- [x] Basic authentication (login, register, profile)
- [x] Basic comic generation
- [x] Comic viewing and management

### ðŸ”„ Features to Update
- [ ] Fix baseURL port (backend uses 8000, client uses 8080)
- [ ] Update ComicRequest model (message â†’ concept)
- [ ] Add world system integration
- [ ] Implement enhanced comic generation
- [ ] Add collection management
- [ ] Add detailed scenarios
- [ ] Add account deletion
- [ ] Add Supabase storage integration

### ðŸ†• New Features to Implement
- [ ] World selection interface
- [ ] Collection creation and management
- [ ] Detailed scenario viewing
- [ ] Account deletion with confirmation
- [ ] Testing interface for development
- [ ] Storage usage tracking
- [ ] Advanced comic generation options

## Development Workflow

### 1. Feature Development
1. Update/create data models first
2. Extend APIClient with new endpoints
3. Create/update ViewModels with business logic
4. Build SwiftUI views with proper state management
5. Add error handling and loading states
6. Test with backend integration
7. Add preview data for SwiftUI previews

### 2. Testing Approach
- Use TestingService for no-auth development testing
- Test all error scenarios (network, auth, validation)
- Use SwiftUI previews extensively
- Test on different devices and orientations

### 3. Backend Sync
- Keep models in sync with backend schemas
- Use proper CodingKeys for snake_case â†” camelCase conversion
- Handle optional fields appropriately
- Validate API responses match expected models

## Performance Considerations

### 1. Image Handling
- Implement image caching for base64 comic images
- Use AsyncImage for URL-based images
- Compress images when necessary
- Consider lazy loading for large comic lists

### 2. Data Management
- Implement pagination for comic lists
- Cache frequently accessed data
- Use background tasks for non-critical operations
- Implement pull-to-refresh for data updates

### 3. Memory Management
- Properly manage ViewModel lifecycles
- Avoid retain cycles in closures
- Use weak references where appropriate
- Monitor memory usage with large image datasets

## Security Best Practices

### 1. Token Management
- Store tokens securely in Keychain (not UserDefaults)
- Implement token refresh logic
- Handle token expiration gracefully
- Clear tokens on logout/deletion

### 2. API Security
- Always use HTTPS in production
- Validate server certificates
- Implement proper error handling without exposing sensitive data
- Use secure coding practices for user input

Remember: This iOS app integrates with a sophisticated backend featuring multi-world organization, cloud storage, and advanced comic generation. Always consider the user experience across all three worlds and ensure smooth integration with the backend's enhanced capabilities. 