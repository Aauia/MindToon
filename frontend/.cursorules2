Absolutely! Here are **very detailed, step-by-step cursor rules** for integrating all analytics from your backend into a dedicated analytics dashboard in your SwiftUI frontend. These rules are designed to ensure a robust, maintainable, and user-friendly integration, with clear connections to your backend API.

---

# Cursor Rules: Full Analytics Integration (Frontend)

---

## 1. **API Contract & Models**

- [ ] **Review Backend API:**  
  - List all analytics endpoints (e.g., `/api/analytics/psychological-assumptions/{world}/{user_id}`, `/api/analytics/summary/{user_id}`, `/api/analytics/weekly-insight/{user_id}`, etc.).
  - For each endpoint, document the expected request parameters and response JSON structure.

- [ ] **Define Swift Models:**  
  - For each analytics type, create a matching Swift struct in `Models/AnalyticsModels.swift`.
  - Ensure all fields (including nested objects/arrays) match backend JSON exactly.
  - Use `Codable` for all models.
  - Add documentation comments to each model and property, referencing the backend field.

---

## 2. **Networking Layer**

- [ ] **Create AnalyticsService.swift in Services/:**
  - For each analytics endpoint, add a function to fetch and decode the data.
  - Use your existing `APIClient` for HTTP requests.
  - Each function should:
    - Accept required parameters (e.g., userId, worldType).
    - Return a `Result<T, Error>` via completion handler or async/await.
    - Decode the response into the correct Swift model.
    - Handle HTTP/network errors and decoding errors gracefully.
  - Add unit tests for each function using mock responses.

---

## 3. **ViewModel Layer**

- [ ] **Create AnalyticsViewModel.swift in Features/ViewModels/:**
  - Add `@Published` properties for each analytics data type (e.g., `psychologicalProfile`, `weeklyInsight`, `summary`, etc.).
  - Add `@Published` properties for loading and error states.
  - Implement a `fetchAllAnalytics(userId:)` method that:
    - Calls all relevant service functions in parallel (using async/await or Combine).
    - Updates the published properties as data arrives.
    - Handles partial failures (e.g., show what is available, display errors for missing data).
  - Add helper methods for formatting data for the view (e.g., chart data, summaries).

---

## 4. **Analytics Dashboard View**

- [ ] **Create AnalyticsDashboardView.swift in Features/Views/:**
  - On appear, call `viewModel.fetchAllAnalytics(userId:)`.
  - Show a loading spinner while any data is loading.
  - If any error occurs, display a clear error message and a retry button.
  - Organize the view into clear, collapsible sections:
    - Psychological Profile (per world, cross-world)
    - Weekly Insights
    - Genre/Art Style/World Distribution (charts)
    - Prompt/Emotion/Creativity Analysis
    - Time Series/Activity Graph
    - Recommendations
  - For each section:
    - Use cards, lists, or charts as appropriate.
    - Show section headers and tooltips explaining each metric.
    - Handle empty states (e.g., “No data available yet”).
    - Support dark mode and accessibility.

---

## 5. **Navigation & Access**

- [ ] **Add Navigation Entry:**
  - In your main dashboard or sidebar, add a button/tab labeled “Analytics” or “Insights”.
  - Use a clear icon (e.g., chart, lightbulb).
  - When tapped, navigate to `AnalyticsDashboardView`.

---

## 6. **UI/UX & User Feedback**

- [ ] **Loading & Error States:**
  - Show a global loading indicator while fetching.
  - For each section, show a section-specific loading/error/empty state if needed.
  - Allow retrying failed requests.

- [ ] **Responsiveness:**
  - Use `ScrollView` for vertical scrolling.
  - Make sections collapsible/expandable for easier navigation.
  - Use `GeometryReader` or adaptive layouts for different device sizes.

- [ ] **Accessibility:**
  - Add VoiceOver labels to all charts and key data.
  - Ensure color contrast is sufficient.
  - Support dynamic type (large text).

---

## 7. **Testing & Validation**

- [ ] **Test with Real and Mock Data:**
  - Use mock responses to test all UI states (full data, partial data, errors, empty).
  - Test on different devices and orientations.

- [ ] **User Feedback:**
  - Add tooltips or info buttons for each metric, explaining what it means and how it’s calculated.

---

## 8. **Documentation**

- [ ] **Document All Integration Points:**
  - For each API call, document the endpoint, parameters, and expected response.
  - For each Swift model, document the mapping to backend fields.
  - For each view section, document what data is shown and why.

---

## 9. **Maintainability**

- [ ] **Centralize Analytics Logic:**
  - Keep all analytics networking in `AnalyticsService.swift`.
  - Keep all analytics state in `AnalyticsViewModel.swift`.
  - Keep all analytics UI in `AnalyticsDashboardView.swift` and subviews.

- [ ] **Versioning:**
  - If backend analytics endpoints change, update models and service functions accordingly.
  - Add version checks if needed.

---

## 10. **Example File Structure**

```
frontend/Trial2/
  Features/
    ViewModels/
      AnalyticsViewModel.swift
    Views/
      AnalyticsDashboardView.swift
      PsychologicalProfileSection.swift
      WeeklyInsightSection.swift
      DistributionChartsSection.swift
      RecommendationsSection.swift
  Models/
    AnalyticsModels.swift
  Services/
    AnalyticsService.swift
```

---

## 11. **Example: AnalyticsService.swift (Skeleton)**

```swift
import Foundation

struct PsychologicalProfile: Codable { /* ... */ }
struct WeeklyInsight: Codable { /* ... */ }
// ... other models

class AnalyticsService {
    static let shared = AnalyticsService()
    func fetchPsychologicalProfile(userId: Int, completion: @escaping (Result<PsychologicalProfile, Error>) -> Void) { /* ... */ }
    func fetchWeeklyInsight(userId: Int, completion: @escaping (Result<WeeklyInsight, Error>) -> Void) { /* ... */ }
    // ... other fetch methods
}
```

---

## 12. **Example: AnalyticsViewModel.swift (Skeleton)**

```swift
import Foundation
import Combine

class AnalyticsViewModel: ObservableObject {
    @Published var psychologicalProfile: PsychologicalProfile?
    @Published var weeklyInsight: WeeklyInsight?
    // ... other analytics
    @Published var isLoading = false
    @Published var error: Error?

    func fetchAllAnalytics(userId: Int) {
        // Call all AnalyticsService methods, update published properties
    }
}
```

---

## 13. **Example: AnalyticsDashboardView.swift (Skeleton)**

```swift
import SwiftUI

struct AnalyticsDashboardView: View {
    @StateObject var viewModel = AnalyticsViewModel()
    var body: some View {
        ScrollView {
            if viewModel.isLoading { ProgressView() }
            else if let error = viewModel.error { Text(error.localizedDescription) }
            else {
                PsychologicalProfileSection(profile: viewModel.psychologicalProfile)
                WeeklyInsightSection(insight: viewModel.weeklyInsight)
                // ... other sections
            }
        }
        .onAppear { viewModel.fetchAllAnalytics(userId: /* current user id */) }
        .navigationTitle("Analytics")
    }
}
```

---

## 14. **Example: Section View (e.g., PsychologicalProfileSection.swift)**

```swift
import SwiftUI

struct PsychologicalProfileSection: View {
    let profile: PsychologicalProfile?
    var body: some View {
        GroupBox(label: Text("Psychological Profile")) {
            if let profile = profile {
                // Show profile details
            } else {
                Text("No data available.")
            }
        }
    }
}
```

---

## 15. **Final Checklist**

- [ ] All analytics endpoints are mapped to Swift models and service functions.
- [ ] All analytics data is fetched and displayed in a dedicated dashboard view.
- [ ] UI is user-friendly, accessible, and robust to errors/empty states.
- [ ] Documentation is up to date for all integration points.

---

**These rules will ensure a seamless, maintainable, and user-friendly analytics integration between your backend and frontend.  
Let me know if you want code generation for any specific part, or if you want to see a full example for a particular analytics type!**